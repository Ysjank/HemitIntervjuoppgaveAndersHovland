@page "/patients/delete"
@using Microsoft.EntityFrameworkCore
@using HemitIntervjuoppgaveAndersHovland.Data
@inject IDbContextFactory<HemitIntervjuoppgaveAndersHovland.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Patients</h2>
    <hr />
    @if (patient is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@patient.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateOfBirth</dt>
            <dd class="col-sm-10">@patient.DateOfBirth</dd>
        </dl>
        <EditForm method="post" Model="patient" OnValidSubmit="DeletePatient" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(patient is null)">Delete</button> |
            <a href="/patients">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Patient? patient;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        patient = await context.Patients.FirstOrDefaultAsync(m => m.Id == Id);

        if (patient is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePatient()
    {
        using var context = DbFactory.CreateDbContext();
        context.Patients.Remove(patient!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/patients");
    }
}
